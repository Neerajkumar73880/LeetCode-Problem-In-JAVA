Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer
in any order.

 

Example 1:

Input: nums = [4,6,7,7]
Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]
Example 2:

Input: nums = [4,4,3,2,1]
Output: [[4,4]]
 

Constraints:

1 <= nums.length <= 15
-100 <= nums[i] <= 100 












**********************************************************************************************************************************************************


















class Solution {
    Set<List<Integer>> res;
    public List<List<Integer>> findSubsequences(int[] nums) {
         res = new HashSet<>();
         findSequence(new ArrayList<>(), 0, nums);
         return new ArrayList<>(res);
    }

    public void findSequence(List<Integer> l, int index, int[] nums) {
        if (l.size() >= 2) {
            res.add(new ArrayList<>(l));
        }
        for (int i = index; i < nums.length; i++) {
            if (l.size() == 0 || l.get(l.size() - 1) <= nums[i]) {
                l.add(nums[i]);
                findSequence(l, i + 1, nums);
                l.remove(l.size() - 1);
            }
        }
    }
}
