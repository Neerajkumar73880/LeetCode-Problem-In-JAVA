You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. Each edge is red or blue in this graph, and there could
be self-edges and parallel edges.

You are given two arrays redEdges and blueEdges where:

redEdges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and
blueEdges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph.
Return an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path,
or -1 if such a path does not exist.

 

Example 1:

Input: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []
Output: [0,1,-1]
Example 2:

Input: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]
Output: [0,1,-1]
 

Constraints:

1 <= n <= 100
0 <= redEdges.length, blueEdges.length <= 400
redEdges[i].length == blueEdges[j].length == 2
0 <= ai, bi, uj, vj < n




















****************************************************************************************************************************************************************



















class Solution {
    public int[] shortestAlternatingPaths(int n, int[][] redEdges, int[][] blueEdges) {
        Map<Integer, List<Integer>> redMap = constructMap(redEdges);
        Map<Integer, List<Integer>> blueMap = constructMap(blueEdges);
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[n][2];
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        queue.offer(new int[]{0, 0});
        queue.offer(new int[]{0, 1});
        visited[0][0] = visited[0][1] = true;

        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] curr = queue.poll();
                ans[curr[0]] = ans[curr[0]] == -1 ? step : Math.min(ans[curr[0]], step);
                if (curr[1] == 0) {
                    if (blueMap.containsKey(curr[0])) {
                        for (int neig : blueMap.get(curr[0])) {
                            if (visited[neig][1]) continue;
                            queue.offer(new int[]{neig, 1});
                            visited[neig][1] = true;
                        }
                    }
                } else {
                    if (redMap.containsKey(curr[0])) {
                        for (int neig : redMap.get(curr[0])) {
                            if (visited[neig][0]) continue;
                            queue.offer(new int[]{neig, 0});
                            visited[neig][0] = true;
                        }
                    }
                }
            }
            step++;
        }
        return ans;
    }

    private Map<Integer, List<Integer>> constructMap(int[][] edges) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int[] edge : edges) {
            map.computeIfAbsent(edge[0], x -> new ArrayList<>()).add(edge[1]);
        }
        return map;
    }
}
