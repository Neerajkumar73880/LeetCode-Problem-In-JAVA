Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters.
If no such two words exist, return 0.

 

Example 1:

Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".
Example 2:

Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".
Example 3:

Input: words = ["a","aa","aaa","aaaa"]
Output: 0
Explanation: No such pair of words.





***************************************************************************************************************************************



class Solution {
    
    
    public int maxProduct(String[] words) {
        int l1 = words.length;
        int state[]=new int[l1];
        
        for(int i=0;i<l1;i++){
            state[i]=stateToString(words[i]);
        }
        int maxproduct = 0;
        for(int i =0;i<l1;i++){
            for(int j=i+1;j<l1;j++){
                if((state[i] & state[j])==0){
                    if(words[i].length() * words[j].length() >maxproduct){
                        maxproduct = words[i].length() * words[j].length();
                    }
                }
            }
           
        }
         return maxproduct;
        
    }
    
private int stateToString(String s){
    int s1=0;
    for(char c: s.toCharArray()){
        int index = c - 'a';
        s1 |= 1 << (index);
    }
    return s1;
    }
}
