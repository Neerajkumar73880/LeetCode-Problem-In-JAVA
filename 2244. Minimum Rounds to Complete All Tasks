You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the 
same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

 

Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.
Example 2:

Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you 
cannot complete all the tasks, and the answer is -1.
 

Constraints:

1 <= tasks.length <= 105
1 <= tasks[i] <= 109  














************************************************************************************************************************************************************













class Solution {
    public int minimumRounds(int[] tasks) {
        

        Map<Integer,Integer> freqMap = new HashMap<>();
        for(int task:tasks){
            freqMap.put(task,freqMap.getOrDefault(task,0)+1);
        } 
        int ans = 0;
        for(Map.Entry<Integer,Integer> entry:freqMap.entrySet()){
            int freq = entry.getValue();
            if(freq ==1){
                return -1;
            }
            // 2X + 3Y = freq
            if(freq %3!=0){
                ans +=freq/3 +1;
            }else{
                ans += freq/3;
            }
        }
        return ans;
    }
}















************************************************* SECOND APROACH ***********************************************************************************




















class Solution {
    public int minimumRounds(int[] tasks) {
        Arrays.sort(tasks);
        int i =0;
        int n = tasks.length;
        int count =1;
        int sum = 0;
        if(n==0 || n==1){
            return -1;
        }else if(n==2 && (tasks[0]==tasks[1])){
            return 1;
        }else if(n==2 && (tasks[0]!=tasks[1])){
            return -1;
        }else if(n==3 && ((tasks[0]==tasks[1]) && (tasks[1]==tasks[2]))){
            return 1;
        }
        else if((n==3) && ((tasks[0]!=tasks[1]) || tasks[1]!=tasks[2])){
            return -1;
        }
        else{
            for(i=0;i<n-1;i++){
            int val = tasks[i];
            int j = i+1;
            count = 1;
            while(val==tasks[j]){
                count++;
                if(j==(n-1)){
                    break;
                }
                j++;
            }
            i = i+count-1;
            if(count<2){
                return -1;
            }else if(count%3==0){
                sum = sum + count/3;

            }else if(count%3==1){
                sum = sum + (count/3) + 1;
            }else if (count%3==2){
                sum = sum + (count+1)/3;

            }
            
        }
        }
        
        return sum;
    }
}
