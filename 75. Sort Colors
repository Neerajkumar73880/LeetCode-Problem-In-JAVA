Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

















**********************************************************************************************************************************************************************










class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length-1;
        while(mid<=high){
            if(nums[mid]==0){
                int temp = nums[mid];
                nums[mid] = nums[low];
                nums[low]=temp;
                mid++;
                low++;
            }
            else if(nums[mid]==2){
                int temp = nums[mid];
                nums[mid]=nums[high];
                nums[high]=temp;
                high--;
            }
            else{
                mid++;
            }
        }



        // int zero =0;
        // int ones =0;
        // int two = 0;
        // for(int i=0;i<nums.length;i++){
        //     if(nums[i]==0)zero++;
        //     else if(nums[i]==1)ones++;
        //     else two++;
        // }
        // int i=0;
        // for(i=0;i<zero;i++){
        //     nums[i]=0;
        // }

        // for(;i<ones+zero;i++){
        //     nums[i]=1;
        // }

        // for(;i<nums.length;i++){
        //     nums[i]=2;
        // }
    }
}
